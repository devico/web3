/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Donation,
  DonationInterface,
} from "../../../contracts/lesson5/Donation";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "EtherSendError",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientFunds",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroEther",
    type: "error",
  },
  {
    inputs: [],
    name: "donate",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "donations",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "donators",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDonators",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSumOfDonations",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sendHelp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002b67111487d37442e55060c01b61008a60201b60201c565b6100456797c834f0dd488d1160c01b61008a60201b60201c565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061008d565b50565b610e568061009c6000396000f3fe6080604052600436106100745760003560e01c8063bf1482fa1161004e578063bf1482fa146101b7578063cc6cb19a146101e2578063ed88c68e1461021f578063f3a014891461022957610121565b80636f965a63146101265780638da5cb5b1461014f578063ac62f5661461017a57610121565b366101215761008d67a05cf9eb2ff1ee8e60c01b610254565b600034036100ef576100a967575df9b666b68c5760c01b610254565b6100bd678ff14be3c3be6b0360c01b610254565b6040517f25b656fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610103678033e09c5e4ae43460c01b610254565b61011767eeffe0c00db0ef4560c01b610254565b61011f610257565b005b600080fd5b34801561013257600080fd5b5061014d60048036038101906101489190610b32565b61052b565b005b34801561015b57600080fd5b506101646107fa565b6040516101719190610b81565b60405180910390f35b34801561018657600080fd5b506101a1600480360381019061019c9190610b9c565b61081e565b6040516101ae9190610b81565b60405180910390f35b3480156101c357600080fd5b506101cc61085d565b6040516101d99190610c87565b60405180910390f35b3480156101ee57600080fd5b5061020960048036038101906102049190610ca9565b610927565b6040516102169190610ce5565b60405180910390f35b610227610257565b005b34801561023557600080fd5b5061023e61093f565b60405161024b9190610ce5565b60405180910390f35b50565b61026b674f165adb3e778edd60c01b610254565b61027f673db7c44cd473817760c01b610254565b61029367079ec92d1936c02560c01b610254565b6000600190506102ad670b6e340c5750bae160c01b610254565b6102c1679893dea09906dabf60c01b610254565b60005b6001805490508110156103d6576102e56767e455560af99e8660c01b610254565b6102f9676ee19f0dae6b2f4560c01b610254565b3373ffffffffffffffffffffffffffffffffffffffff166001828154811061032457610323610d00565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036103af5761037e6793daa6f3c0d8cca160c01b610254565b610392670c3641df7fa5011060c01b610254565b600091506103aa673c38e2d0c086268f60c01b610254565b6103d6565b6103c367136dd6a8e825d95060c01b610254565b80806103ce90610d5e565b9150506102c4565b506103eb6778cb7d35df2e2e4260c01b610254565b6103ff6709c57984ebe122d160c01b610254565b80156104a9576104196713fac791bc8fd2e560c01b610254565b61042d67c69a9b8581def35260c01b610254565b6104416790844fc5b46b4a2c60c01b610254565b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506104be565b6104bd675094e17ea3c83fb260c01b610254565b5b6104d267af06cae3bc87b80960c01b610254565b34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105219190610da6565b9250508190555050565b61053f67147b0186233ec23a60c01b610254565b610553678b0657fbdc84cc8260c01b610254565b6105676724791bc3d073ddea60c01b610254565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610614576105ce679fdb0e9c826ce19c60c01b610254565b6105e2672b280ef59d9f44b660c01b610254565b6040517f5fc483c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61062867f43def2b1a75476c60c01b610254565b61063c67297b6f3994f45f8060c01b610254565b6106506757b1c653ff7ef4b860c01b610254565b804710156106b25761066c673c7bbee50c39529260c01b610254565b6106806720a1e42790bd6cf660c01b610254565b6040517f356680b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106c667326ff09a4c518dc660c01b610254565b6106da67aec86e1d15a12bc960c01b610254565b6106ee67a250acab35d6b40560c01b610254565b60008273ffffffffffffffffffffffffffffffffffffffff168260405161071490610e0b565b60006040518083038185875af1925050503d8060008114610751576040519150601f19603f3d011682016040523d82523d6000602084013e610756565b606091505b5050905061076e6775f0d9887f43636f60c01b610254565b610782671bc46818db14130260c01b610254565b806107e15761079b67f51be4abf19ebaea60c01b610254565b6107af6767a2583829a33f2860c01b610254565b6040517f3b6ce6ce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107f5675da6d8e29dc422b360c01b610254565b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061082e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606108736710d7bbb9d91f6d9960c01b610254565b61088767994ae44e566c297460c01b610254565b61089b6761fcf0a7a489779b60c01b610254565b600180548060200260200160405190810160405280929190818152602001828054801561091d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116108d3575b5050505050905090565b60026020528060005260406000206000915090505481565b600061095567f185be316f1002c360c01b610254565b61096967b5156b6b4a19760260c01b610254565b61097d675b69f3347a0e20eb60c01b610254565b6000610993677638a2a9a905d68a60c01b610254565b6109a7670f70813f29799a4360c01b610254565b60005b600180549050811015610a69576109cb6771e3185dea2a4d8360c01b610254565b60026000600183815481106109e3576109e2610d00565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482610a549190610da6565b91508080610a6190610d5e565b9150506109aa565b50610a7e6715c3ec990f0af8c060c01b610254565b610a92671b74838ee31a8f3560c01b610254565b8091505090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ac982610a9e565b9050919050565b610ad981610abe565b8114610ae457600080fd5b50565b600081359050610af681610ad0565b92915050565b6000819050919050565b610b0f81610afc565b8114610b1a57600080fd5b50565b600081359050610b2c81610b06565b92915050565b60008060408385031215610b4957610b48610a99565b5b6000610b5785828601610ae7565b9250506020610b6885828601610b1d565b9150509250929050565b610b7b81610abe565b82525050565b6000602082019050610b966000830184610b72565b92915050565b600060208284031215610bb257610bb1610a99565b5b6000610bc084828501610b1d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610bfe81610abe565b82525050565b6000610c108383610bf5565b60208301905092915050565b6000602082019050919050565b6000610c3482610bc9565b610c3e8185610bd4565b9350610c4983610be5565b8060005b83811015610c7a578151610c618882610c04565b9750610c6c83610c1c565b925050600181019050610c4d565b5085935050505092915050565b60006020820190508181036000830152610ca18184610c29565b905092915050565b600060208284031215610cbf57610cbe610a99565b5b6000610ccd84828501610ae7565b91505092915050565b610cdf81610afc565b82525050565b6000602082019050610cfa6000830184610cd6565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d6982610afc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d9b57610d9a610d2f565b5b600182019050919050565b6000610db182610afc565b9150610dbc83610afc565b9250828201905080821115610dd457610dd3610d2f565b5b92915050565b600081905092915050565b50565b6000610df5600083610dda565b9150610e0082610de5565b600082019050919050565b6000610e1682610de8565b915081905091905056fea2646970667358221220a034771dc943739d7c64a1fde6375ca111b81d1117dcf5b6cf147c45f833d2f864736f6c63430008140033";

type DonationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DonationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Donation__factory extends ContractFactory {
  constructor(...args: DonationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Donation> {
    return super.deploy(overrides || {}) as Promise<Donation>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Donation {
    return super.attach(address) as Donation;
  }
  override connect(signer: Signer): Donation__factory {
    return super.connect(signer) as Donation__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DonationInterface {
    return new utils.Interface(_abi) as DonationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Donation {
    return new Contract(address, _abi, signerOrProvider) as Donation;
  }
}
