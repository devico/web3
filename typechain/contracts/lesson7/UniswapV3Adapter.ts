/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface UniswapV3AdapterInterface extends utils.Interface {
  functions: {
    "collectAllFees(uint256)": FunctionFragment;
    "createPool(address,address,uint24,uint160)": FunctionFragment;
    "decreaseLiquidity(uint256,uint128)": FunctionFragment;
    "encodePriceSqrt(uint256,uint256)": FunctionFragment;
    "increaseLiquidity(uint256,uint256,uint256)": FunctionFragment;
    "mintNewPosition(address,address,uint24,uint256,uint256,int24,int24)": FunctionFragment;
    "nonfungiblePositionManager()": FunctionFragment;
    "positions(uint256)": FunctionFragment;
    "swapExactInput(address,uint256,uint256,bytes)": FunctionFragment;
    "swapExactOutput(address,uint256,uint256,bytes)": FunctionFragment;
    "swapRouter()": FunctionFragment;
    "uniSwapV3Factory()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "collectAllFees"
      | "createPool"
      | "decreaseLiquidity"
      | "encodePriceSqrt"
      | "increaseLiquidity"
      | "mintNewPosition"
      | "nonfungiblePositionManager"
      | "positions"
      | "swapExactInput"
      | "swapExactOutput"
      | "swapRouter"
      | "uniSwapV3Factory"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "collectAllFees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidity",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "encodePriceSqrt",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidity",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNewPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nonfungiblePositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactInput",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactOutput",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniSwapV3Factory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "collectAllFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodePriceSqrt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintNewPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapExactInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniSwapV3Factory",
    data: BytesLike
  ): Result;

  events: {};
}

export interface UniswapV3Adapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniswapV3AdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    collectAllFees(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreaseLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    encodePriceSqrt(
      reserve0: PromiseOrValue<BigNumberish>,
      reserve1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { sqrtPriceX96: BigNumber }>;

    increaseLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      amountAdd0: PromiseOrValue<BigNumberish>,
      amountAdd1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintNewPosition(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      poolFee: PromiseOrValue<BigNumberish>,
      amount0ToMint: PromiseOrValue<BigNumberish>,
      amount1ToMint: PromiseOrValue<BigNumberish>,
      minTick: PromiseOrValue<BigNumberish>,
      maxTick: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<[string]>;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        owner: string;
        token0: string;
        token1: string;
        liquidity: BigNumber;
      }
    >;

    swapExactInput(
      tokenIn: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinimum: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactOutput(
      tokenIn: PromiseOrValue<string>,
      amountOut: PromiseOrValue<BigNumberish>,
      amountInMaximum: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;

    uniSwapV3Factory(overrides?: CallOverrides): Promise<[string]>;
  };

  collectAllFees(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPool(
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    fee: PromiseOrValue<BigNumberish>,
    sqrtPriceX96: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreaseLiquidity(
    tokenId: PromiseOrValue<BigNumberish>,
    liquidity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  encodePriceSqrt(
    reserve0: PromiseOrValue<BigNumberish>,
    reserve1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseLiquidity(
    tokenId: PromiseOrValue<BigNumberish>,
    amountAdd0: PromiseOrValue<BigNumberish>,
    amountAdd1: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintNewPosition(
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    poolFee: PromiseOrValue<BigNumberish>,
    amount0ToMint: PromiseOrValue<BigNumberish>,
    amount1ToMint: PromiseOrValue<BigNumberish>,
    minTick: PromiseOrValue<BigNumberish>,
    maxTick: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

  positions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber] & {
      owner: string;
      token0: string;
      token1: string;
      liquidity: BigNumber;
    }
  >;

  swapExactInput(
    tokenIn: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>,
    amountOutMinimum: PromiseOrValue<BigNumberish>,
    path: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactOutput(
    tokenIn: PromiseOrValue<string>,
    amountOut: PromiseOrValue<BigNumberish>,
    amountInMaximum: PromiseOrValue<BigNumberish>,
    path: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  uniSwapV3Factory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    collectAllFees(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    createPool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    decreaseLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    encodePriceSqrt(
      reserve0: PromiseOrValue<BigNumberish>,
      reserve1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      amountAdd0: PromiseOrValue<BigNumberish>,
      amountAdd1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    mintNewPosition(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      poolFee: PromiseOrValue<BigNumberish>,
      amount0ToMint: PromiseOrValue<BigNumberish>,
      amount1ToMint: PromiseOrValue<BigNumberish>,
      minTick: PromiseOrValue<BigNumberish>,
      maxTick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenId: BigNumber;
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        owner: string;
        token0: string;
        token1: string;
        liquidity: BigNumber;
      }
    >;

    swapExactInput(
      tokenIn: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinimum: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactOutput(
      tokenIn: PromiseOrValue<string>,
      amountOut: PromiseOrValue<BigNumberish>,
      amountInMaximum: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    uniSwapV3Factory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    collectAllFees(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreaseLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    encodePriceSqrt(
      reserve0: PromiseOrValue<BigNumberish>,
      reserve1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      amountAdd0: PromiseOrValue<BigNumberish>,
      amountAdd1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintNewPosition(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      poolFee: PromiseOrValue<BigNumberish>,
      amount0ToMint: PromiseOrValue<BigNumberish>,
      amount1ToMint: PromiseOrValue<BigNumberish>,
      minTick: PromiseOrValue<BigNumberish>,
      maxTick: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<BigNumber>;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactInput(
      tokenIn: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinimum: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactOutput(
      tokenIn: PromiseOrValue<string>,
      amountOut: PromiseOrValue<BigNumberish>,
      amountInMaximum: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    uniSwapV3Factory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    collectAllFees(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreaseLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    encodePriceSqrt(
      reserve0: PromiseOrValue<BigNumberish>,
      reserve1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      amountAdd0: PromiseOrValue<BigNumberish>,
      amountAdd1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintNewPosition(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      poolFee: PromiseOrValue<BigNumberish>,
      amount0ToMint: PromiseOrValue<BigNumberish>,
      amount1ToMint: PromiseOrValue<BigNumberish>,
      minTick: PromiseOrValue<BigNumberish>,
      maxTick: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nonfungiblePositionManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactInput(
      tokenIn: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinimum: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactOutput(
      tokenIn: PromiseOrValue<string>,
      amountOut: PromiseOrValue<BigNumberish>,
      amountInMaximum: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniSwapV3Factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
